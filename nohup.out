Unable to init server: Could not connect: Connection refused
Unable to init server: Could not connect: Connection refused

(exp1.py:1757218): Gdk-CRITICAL **: 16:26:03.055: gdk_cursor_new_for_display: assertion 'GDK_IS_DISPLAY (display)' failed
Files already downloaded and verified
Files already downloaded and verified
Batches Done...:   0%|          | 0/81 [00:00<?, ?it/s]models/pretrained/CIFAR10/U_w_means_0-005174736492335796_n0-0014449692098423839_n0-0010137659264728427_and_stds_1-130435824394226_1-128873586654663_1-1922636032104492_.pt  is Loaded.
EOT attacks being performed...
Working on Black Box Attacks...
Batches Done...:   0%|          | 0/81 [00:01<?, ?it/s]
Traceback (most recent call last):
  File "exp1.py", line 106, in <module>
    reg_net_attack_accs  = attacker.get_attack_accuracy(attack = attack_type,
  File "/home/naddeok5/FIM/adversarial_attacks.py", line 400, in get_attack_accuracy
    attacks = attack_eot.generate(x=inputs.detach().cpu().numpy(), 
  File "../adversarial-robustness-toolbox/art/attacks/attack.py", line 75, in replacement_function
    return fdict[func_name](self, *args, **kwargs)
  File "../adversarial-robustness-toolbox/art/attacks/evasion/projected_gradient_descent/projected_gradient_descent.py", line 190, in generate
    return self._attack.generate(x=x, y=y, **kwargs)
  File "../adversarial-robustness-toolbox/art/attacks/attack.py", line 75, in replacement_function
    return fdict[func_name](self, *args, **kwargs)
  File "../adversarial-robustness-toolbox/art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_pytorch.py", line 209, in generate
    adv_x[batch_index_1:batch_index_2] = self._generate_batch(
  File "../adversarial-robustness-toolbox/art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_pytorch.py", line 266, in _generate_batch
    adv_x = self._compute_torch(
  File "../adversarial-robustness-toolbox/art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_pytorch.py", line 434, in _compute_torch
    perturbation = self._compute_perturbation(x_adv, y, mask)
  File "../adversarial-robustness-toolbox/art/attacks/evasion/projected_gradient_descent/projected_gradient_descent_pytorch.py", line 300, in _compute_perturbation
    grad = self.estimator.loss_gradient(x=x, y=y) * (1 - 2 * int(self.targeted))
  File "../adversarial-robustness-toolbox/art/estimators/classification/pytorch.py", line 761, in loss_gradient
    inputs_t, y_preprocessed = self._apply_preprocessing(x_grad, y=y_grad, fit=False, no_grad=False)
  File "../adversarial-robustness-toolbox/art/estimators/pytorch.py", line 191, in _apply_preprocessing
    x, y = chain_processes(x, y)
  File "../adversarial-robustness-toolbox/art/estimators/pytorch.py", line 184, in chain_processes
    x, y = preprocess.forward(x, y)
  File "../adversarial-robustness-toolbox/art/preprocessing/expectation_over_transformation/pytorch.py", line 105, in forward
    x_preprocess_i, y_preprocess_i = self._transform(x, y)
  File "/home/naddeok5/FIM/models/classes/EoT_Unitary.py", line 51, in _transform
    ortho_net = FstLayUniNet(set_name = self.data.set_name,
  File "/home/naddeok5/FIM/models/classes/first_layer_unitary_net.py", line 77, in __init__
    self.net = torch.hub.load("chenyaofo/pytorch-cifar-models", self.model_name, pretrained=False, verbose = False)
  File "/home/naddeok5/.local/lib/python3.8/site-packages/torch/hub.py", line 382, in load
    model = _load_local(repo_or_dir, model, *args, **kwargs)
  File "/home/naddeok5/.local/lib/python3.8/site-packages/torch/hub.py", line 411, in _load_local
    model = entry(*args, **kwargs)
  File "/home/naddeok5/.cache/torch/hub/chenyaofo_pytorch-cifar-models_master/pytorch_cifar_models/mobilenetv2.py", line 257, in _mobilenet_v2
    model = MobileNetV2(width_mult=width_mult, **kwargs)
  File "/home/naddeok5/.cache/torch/hub/chenyaofo_pytorch-cifar-models_master/pytorch_cifar_models/mobilenetv2.py", line 225, in __init__
    nn.init.kaiming_normal_(m.weight, mode='fan_out')
  File "/home/naddeok5/.local/lib/python3.8/site-packages/torch/nn/init.py", line 432, in kaiming_normal_
    return tensor.normal_(0, std)
KeyboardInterrupt
